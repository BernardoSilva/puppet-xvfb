#!/bin/bash
# selenium - this script starts and stops xvfb
#
# chkconfig:   - 85 15
# description: Xvfb
# processname: Xvfb
# pidfile:    /var/log/xvfb/xvfb.pid

# Source function library.
. /etc/rc.d/init.d/functions


# The server will listen for connections as server number SERVER_ID.
SERVER_ID=:<%= scope.lookupvar('xvfb::server_id') %>
# With value used for screen dimensions.
WIDTH=<%=    scope.lookupvar('xvfb::width')   %>
# Height value used for screen dimensions.
HEIGHT=<%=   scope.lookupvar('xvfb::height')  %>
# Depth value used for screen.
DEPTH=<%=    scope.lookupvar('xvfb::depth')   %>
# By default, only screen 0 exists and has the dimensions 1280x1024x8.
# This will create screen screen_number and sets its width, height, and depth.
SCREEN_NUMBER=<%= scope.lookupvar('xvfb::screen_number') %>




log_dir=<%=    scope.lookupvar('xvfb::params::log_dir')   %>
error_log=<%=    scope.lookupvar('xvfb::params::error_log_file')   %>
std_log=<%=    scope.lookupvar('xvfb::params::default_log_file')   %>
pid_file=<%=    scope.lookupvar('xvfb::params::process_id_file')   %>
java=$( which java )
xvfb=$( which Xvfb )
# Get current user.
user=$USER



start() {
    if test -f $pid_file
    then
        PID=`cat $pid_file| cut -f1 -d " "`
        if [[ $PID != '' ]]
        then
            if  ps --pid $PID >/dev/null;
            then
                echo "Xvfb is already running: $PID"
                exit 0
            else
                echo "Removing stale pid file: $pid_file"
            fi
        else
            rm -f $pid_file
        fi
    fi

    echo -n "Starting Xvfb..."
    su $user -c "$xvfb $SERVER_ID -ac -screen $SCREEN_NUMBER $WIDTHx$HEIGHTx$DEPTH -nolisten tcp >$std_log 2>$error_log &"
        
    if [[ $? != 0 ]]; then
        success 
    else
        echo 
        echo "Check: $log_dir for more details..."
        failure
    fi
    echo
    ps  -C Xvfb -o pid,cmd | grep Xvfb  | awk {'print $1 '} > $pid_file
}


stop() {
    if test -f $pid_file
        then
            PID=`cat $pid_file | cut -f1 -d " "`
            if [[ $PID != '' ]]
            then
                echo -n "Stopping Xvfb..."
                su $user -c "kill -15 $PID"
                if kill -9 $PID ;
                then
                    sleep 2
                    test -f $pid_file && rm -f $pid_file
                    success 
                else    
                    echo "Xvfb could not be stopped..."
                    failure
                fi      
            else            
                rm -f $pid_file
                stop
                exit
        fi      
    else
        echo "Xvfb is not running."
        failure 
    fi  
    echo
} 



status() {
    if test -f $pid_file
    then
        PID=`cat $pid_file | cut -f1 -d " "`
        if [[ $PID == '' ]]
        then
           echo "Xvfb isn't running..."
        else
            if  ps --pid $PID >/dev/null ;
            then
                echo "Xvfb is running...$PID"
            else
                echo "Xvfb isn't running..."
            fi
        fi  
    else    
            echo "Xvfb isn't running..."
    fi
}

case "$1" in
    start)
        $1
        ;;
    stop)
        $1
        ;;
    restart)
        stop
        start
        ;;
    status)
        $1
        ;;
    *)
        echo "Usage: $SELF start|stop|restart|status"
        exit 1
    ;;
esac